Ch05 - Optimization
	Performance Testing
	Compiler Optimizations
	Programmer Optimizations	
	Premature Optimization
	Best Practices
-----------------------------------------------------------------------
Performance Testing
	Timing (how long does it take to run)
		time command
	Profiling (where is the time spent)
		gprof
-----------------------------------------------------------------------		
Compiler optimizations
	Typically very good
	Gcc has numerous optimization levels
		Go to [[the man page for gcc!https://linux.die.net/man/1/gcc!]], search for Optimization or O2
-----------------------------------------------------------------------
Programmer optimizations 
	Reduce functions calls (inline substitution) 
		demonstrated in [[perftest.c!http://progdev.streetercs.net/CS201Demo/perftest.c]]
	Multiple Accumulators
		demonstrated in [[optimize.c!http://progdev.streetercs.net/CS201Demo/perftest.c]]
	Loop Unrolling (reduce iterations in loop) 
		demonstrated in [[optimize.c!http://progdev.streetercs.net/CS201Demo/perftest.c]]
-----------------------------------------------------------------------
Premature Optimization
	"Premature optimization" is a phrase used to describe a situation where a programmer lets performance considerations affect the design of a piece of code. This can result in a design that is not as clean as it could have been or code that is incorrect, because the code is complicated by the optimization and the programmer is distracted by optimizing  .
	When deciding whether to optimize a specific part of the program, Amdahl's Law should always be considered: the impact on the overall program depends very much on how much time is actually spent in that specific part, which is not always clear from looking at the code without a performance analysis.
	From [[wikipedia!https://en.wikipedia.org/wiki/Program_optimization]]
-----------------------------------------------------------------------
The best approach
	A better approach
		Design first
		Code from the design 
		Profile/benchmark the resulting code to see which parts should be optimized. 
	In practice, it is often necessary to keep performance goals in mind when first designing software, but the programmer balances the goals of design and optimization
-----------------------------------------------------------------------
Words of Wisdom
	Donald Knuth made the following two statements on optimization:
		We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. 
		Yet we should not pass up our opportunities in that critical 3%

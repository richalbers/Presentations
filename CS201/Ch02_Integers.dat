------------------------------------------
Ch02 - Info Storage, part 1
	Bits and Bytes
	Data Sizes
	Byte Ordering
	Bit Operators
	Two's complement
------------------------------------------
Bits and Bytes
	Data is stored as bits
		a bit can contain a 0 or 1
		so this is easily represented in binary
	Bits are grouped into bytes (8 bits)
	Half a byte (nibble) can be displayed as a single hex digit
	Memory is typically displayed in hex to save screen space and make it more readable
------------------------------------------
Practice
	Go over how to convert numbers as a class
	Do some practice conversions
------------------------------------------
Data Sizes
	In C, [[data type sizes!https://en.wikipedia.org/wiki/C_data_types]] can vary by implementation
	Values might be	
		Integers:
			short - 2 bytes
			int	- 4 bytes
			long - 8 bytes
			long long - 16 bytes
		Floating Point
			float - 4 bytes
			double - 8 bytes
		Other
			pointer (char*, int*, long*, etc) - 
				4 bytes on 32 bit machine
				8 bytes on 64 bit machine
	sizeof() function can be used to show the actual size for a particular implemention
------------------------------------------
Practice
	Write a C program that displayes the sizes of each type using sizeof() 
		Ideally, run it on both Windows and Linux
------------------------------------------
Byte ordering
	Data is stored in memory in one of two ways
		Big Endian - stores big end first
		Little Endian - stores little end first
	For example, an integer containing the value 0x12345678 would be stored in one of the two following ways
		[[code]]
			Big Endian:     0x12 0x34 0x56 0x78
			Little Endian:  0x78 0x56 0x34 0x12
	For most programmers, it doesn't usually matter    
		Unless you're looking at a memory dump
		or working on code that moves data from one machine to another
		or other low-level situations I can't think of right now
------------------------------------------
Practice	
	What will the example code below print
		on a big endian machine?
		on a little endian machine?
	Example (untested!!!)
	[[code]]
		#include "stdio.h" [[desc provides definition of printf()]]
		int main() {
			unsigned int x=0x12345678; [[desc creates an unsigned int (named x) and initializes it with the hex value 0x12345678]]
			unsigned char* xp;	[[desc creates a pointer to a character (named xp)]]
			
			xp = (unsigned char*) &x;	[[desc puts the address of x into xp<br>Since x is an int, and xp wants the address of a char, we have to cast &x as a char* to please the compiler gods<br>Casting is done in C by putting the data type in ()]]
			printf("%u", *xp); [[desc prints the value (a single byte) pointed to by xp, as an unsigned number (as opposed to a character)]]
			
			return 1;
		}
------------------------------------------
Bit Operators
	C provides a few operators to do bit manipulation
		& - bitwise AND
		| - bitwise OR
		^ - bitwise XOR (exclusive or)
		~ - bitwise not (i.e. ones complement) 
		>> - shift right
		<< - shift left
	Examples 
		[[code]]
		int x=0x0f;
		int y=0xf0;
		printf("%x \n", x & y);  // prints 0x00
		printf("%x \n", x | y);  // prints 0xff
		printf("%x \n", x ^ y);  // prints 0xff
		printf("%x \n", ~x);     // prints 0xf0
		printf("%x \n", x >> 2); // prints 0x03
		printf("%x \n", x << 2); // prints 0x3c
	Note: for right shifts (>>) 
		logical shifts are used for unsigned data
			0's fill vacated leftmost bits
		arithmetic shifts are used for signed data
			uppermost bit fills vacated leftmost bits
-------------------------------------------
Practice
	What is the result of each of the following?
		0x12 & 0x0f
		0x32 & 0x11
		'f' & 0xdf   (consult ascii chart)
		
		0x55 | 0x0f
		0x31 | 0xc8
		'A' | 0x20  (consult ascii chart)
		
		0xff ^ 0xf0 		
		0x12 ^ 0xff
		0x31 ^ 0xc8
		
		0x04 << 1
		0x04 << 2
		1 << 1
		2 << 3 
		
		16 >> 1
		8 >> 4
		0x40 >> 4  
		0x80 >> 1  (2 possible answers)
		
-------------------------------------------
Example
	Printing individual bytes of 4 byte number
	[[code]]
		/* ***************************************************
		* Prints IP address as Dotted Quad (in base 10) twice. 
		*   @param ipAddr - IP address to print
		***************************************************** */ 
		void showIpAsDottedQuad(unsigned int ipAddr) {
			//method 1: shift then mask
			printf("%d.%d.%d.%d \n",
				(ipAddr >> 24) & 0x000000ff,
				(ipAddr >> 16) & 0x000000ff,
				(ipAddr >> 8) & 0x000000ff,
				ipAddr & 0x000000ff
			);
		
			// method 2: mask then shift
			printf("%d.%d.%d.%d \n",
				(ipAddr & 0xff000000) >> 24,
				(ipAddr & 0x00ff0000) >> 16,
				(ipAddr & 0x0000ff00) >> 8,
				ipAddr & 0x000000ff
			);
		}
-------------------------------------------
Example 2
	Example processing a set of 1 bit flags
	[[code]]
		/* ****************************************************
		* Prints status of each of the 9 engines
		*   @param engineFlags - 9 Engine Flags in lower 9 bits.
		*                        0=OK; 1=failed
		******************************************************** 
		void printEngineStatus(unsigned short engineFlags) {
			unsigned short nineFlags = engineFlags & 0x1ff;
			
			if ( !(nineFlags) )
			        printf("All engines are OK\n");
			else {
				for (int x = 0; x <= 8; x++)
					if ((nineFlags >> x) & 0x1)
						printf("Engine %d: failed.\n", x);
					else
						printf("Engine %d: OK\n", x);
			}
		}
----------------------------------------------------
Example 2, take 2
	Another take on prevous example (same functionality)
	[[code]]
		/* ****************************************************
		* Prints status of each of the 9 engines
		*   @param engineFlags - 9 Engine Flags in lower 9 bits.
		*                        0=OK; 1=failed
		******************************************************** 
		void printEngineStatus(unsigned short engineFlags) {
			unsigned short nineFlags = engineFlags & 0x1ff;
			
			if (!(nineFlags))
				printf("All engines are OK\n");
			else {
				for (int x = 0; x <= 8; x++)
					printf("Engine %d: %s.\n", 
						x, 
						((nineFlags >> x) & 0x1)? "failed" : "OK"
					);
			}
		}
-------------------------------------------
Two's Complement
	For unsigned numbers, simple binary is used.
		00000001 (binary) = 1 (base 10)
		11111111 (binary) = 255 (base 10)
	For signed numbers, [[two's complement!https://en.wikipedia.org/wiki/Two%27s_complement]] is used [[img TwosComplement.PNG]]
		00000001 (binary) = 1 (base 10)
		11111111 (binary) = -1 (base 10)
	This system was chosen because it made the electrical circuitry simpler
	In two's complment
		if the high order bit is 1, it's negative
		to go between + and -, toggle the bits and add 1
-------------------------------------------
Practice
	Express each of the following in binary as an 8 bit integer using 2's complement
		0
		1
		-1
		7
		-7
	What are the following 2's complment numbers in base 10?
		00000010
		11111101
		00001111
		11110000	
-------------------------------------------

















------------------------------------------
Ch 16 - Linked lists
	At the end of this presentation, you should be able to
		explain what a link list is and how it's structured
		explain the benfits and drawbacks of a linked list
		write pseudocode for common linked list operations
		implement a linked list as an ADT
------------------------------------------
Overview
	A linked list is a dynamic data structure used to store multiple values of the same type
	It is comprised of nodes, with each node pointing to the next node in the list.
	Each node consists of
		The data to be stored (int, string, object, etc..)
		A pointer to the next node
	For example:
[[img https://www.tutorialspoint.com/data_structures_algorithms/images/dsa_linkedlist.jpg]]
---------------------------------------------------------------
Why linked lists?
	Arrays can store multiple instances of data of the same time, but have the following limitations:
		The size is fixed
		Keeping the data in-order when inserting may require a lot of data to be moved, which is slow.
	Linked lists solve both these problems
		They grow and shrink as needed
		They keep items in-order during insertion/deletions without moving any data
-------------------------------------------------------------
The drawbacks
	Random access isn’t possible (list must be accessed sequentially starting with the first node)
	There’s higher memory requirements (an extra pointer is stored with each piece of data)

------------------------------------------------------------------
Implementation
	In OOP (Object Oriented Programming), Linked lists are commonly implmented as an Abstract Data Type (i.e. a class).  
		An ADT provides an interface that can be used without the user knowing how the details are implemented. This is what a class does.
	A struct is defined for the Node
	A class is defined for the Linked list.
		The only data it has is a single pointer named head.
	For example:
	[[code]]
		struct Node {
			int data; 
			Node* next;
		}
		    
		class LinkedList {
		public:
			//insert, remove, print, etc..
		private:
			Node* head;
		}
------------------------------------------------------------------
Operations
	The following operations are commonly implemented for a linked list
		Create (constuctor)
		Insert new data
		Remove data (delete a node)
		Print
		Search
		Copy
		Delete
------------------------------------------------------------------
Constructor and print
	Constructor is simple
		Just initalize head to NULL;
	To print, traverse the list and print out the data in each node
	[[code]]
		current = head;
		while (current != NULL) {
			cout << current->data << ' ';
			current = current->next;
		}
	Note: when implmenting a linked list, it's good to write the print function early so you can see the results of your insertions and removals.
--------------------------------------------------------------------
Insert
	Pseudocode to insert data is as follows:
	[[code]]
		Insert(data)
			Build a node to hold the new data
			If list is empty
				set head to new Node
			else if data goes first
				newNode->next = head;
				head = newNode
			else
				find node that should precede new node
				newNode->next = prev->next;
				prev->next = newNode
---------------------------------------------------------------------
Remove
	Pseudocode to remove data is as follows:
	[[code]]
		Remove(data)
			If list is empty
				return
			find node that contains data (curr), and previous node (prev)
			prev->next = prev->next->next;
			delete curr
---------------------------------------------------------------------

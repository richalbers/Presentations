------------------------------------------
Ch 3 - File Input
	At the end of this presentation, you should be able to
		open a disk file as an input stream
		handle errors that occur on the open
		read both formatted and unformatted data
		read a file until EOF (end-of-file) is reached

------------------------------------------
File Input
	Disk files can be read as a data stream just as we previously read cin.
	The only difference is several things are done automatically when using cin.
	cin is:
		declared for us automatically in iostream
		opened automatically when the program begins
		closed automatically when the program ends
	So, we need to
		#include &lt;fstream&gt; (for access to the file stream object definitions)
		declare our file stream variable
		open it
		close it

--------------------------------------------
Opening a file for input
	This example shows how to open a file for processing as an input stream
		[[code]]
		#include &lt;fstream&gt; //for file I/O
		#include <iostream> //for cout
		#include &lt;string&gt; // to use getline
		&nbsp;
		int main() {
			std::ifstream inputStream;
			std::string filename="filename.txt";
					
			//open the file, if open fails abort
			inputStream.open(filename);
			if (! inputStream) {
				std::cout &lt;&lt; "File " &lt;&lt; filename &lt;&lt; " could not be opened.\n";
				std::cout &lt;&lt; "program terminated.\n";
				return -1;
			}
					
			//read the data
			...
						
			//close the file
			inputStream.close();
					
			return 0;
		}
--------------------------------------------
Practice	
	Create a program containing the code on the previous slide
	Create a text file for it to read 
		Since there is no directory specified before the filename, the file will need to be in the process's "current working directory".  When running in Visual Studio, that's the same directory your project's source files (.cpp, .h, etc.) are in
	Step through the program in the debugger to see if the open succeeds
--------------------------------------------
reading data
	There are several methods that can be used to read the data from an input stream
	The ones we'll look at are:
		To read formatted data (i.e. data delimited by white space):
			>>
		To read unformatted data:
			istream.get(char) - reads a character 
			istream.getline(cstring, maxlength)
			getline(istream, string) - reads an entire line
 
		There are others.  See [[ifstream documentation!http://www.cplusplus.com/reference/fstream/ifstream/]]
---------------------------------------------
reading formatted data
	Formatted data (values separated by white space) can easily be read using >>.
		[[code]]
			...
				int x,y,z;
				float f;
					
				//examples of reading 
				inputStream >> x;   //reads one int
				inputStream >> x >> y >> z; //reads 3 ints
				inputStream >> f;   //reads a float
					
				//reads integers until end-of-file (EOF) is reached
				while (inputStream >> x)
					std::cout << x;
				
			...
-------------------------------------------
Practice
	Exercise 1
		Modify your text file so it contains the following:
		[[code]]
			10 20 30
			3.14 2.7 
		Modify your program to read this data into 5 separate variables
	Exercise 2
		Modify your program to 
			read your .cpp source file 
				using streaming input ( >> )
				character by character (until EOF)
				printing each character
				counting the number of characters read
			print out the count after the file is closed
--------------------------------------------
reading unformatted data
	Unformatted data is data that isn't separated by white space (or some other delimiter)
		It's just a bunch of lines or characters
	It can be read character by character, or line by line.
		[[code]]
			...
			//to read a single char
			char ch;
			inputStream.get(ch)
			std::cout << ch << endl;				
					
			// read a single line into a char array
			char cstrLine[200];
			inputStream.getline(cstrLine, 200);
			std::cout << cstrLine << std::endl;
					
			// read a single line into string
			// use getline from <string>
			std::string strLine;
			std::getline(inputStream, strLine);
			std::cout << strLine;
	Note: There are two versions of getline()
		One is a member of the istream class (defined in <istream> and reads into a char array)
		The other is not a member of a class (defined in <string> and reads into strings)
------------------------------------------
reading until EOF
	Many of these functions return null (false) when they reach eof
	Reading to EOF using get()
		[[code]]
			// reads lines until end-of-file (EOF) is reached
			// and sends each line to cout
			char ch;
			while (inputStream.get(ch))
				std::cout << ch;	
	Reading to EOF using getLine() (from <string>)
		[[code]]
			// reads lines until end-of-file (EOF) is reached
			// and sends each line to cout
			std::string strLine;
			while (getline(inputStream, strLine))
				std::cout << strLine << std::endl;
------------------------------------------
Practice
	Problem 1
		Modify your program to read your .cpp source file character by character using get()
			print each character out to the console
			keep a count of the number of characters in the file
			print the count after the file is closed
	Problem 2
		Modify your program to read your .cpp source file line by line into cstrings
			print each line out to the console
			keep a count of the number of characters in the file
			print the count after the file is closed
	Problem 3
		Modify your program to read your .cpp source file line by line into strings
			print each line out to the console
			keep a count of the number of characters in the file
			print the count after the file is closed
------------------------------------------
Extra
	This presention covered how to read files using streaming IO (fstream)
	The C langauge didn't support streaming IO so files were read using other methods
	Those methods still work in C++ but aren't covered here




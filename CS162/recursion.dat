------------------------------------------
Recursion (Ch 15)
	At the end of this presention you should be able to
		Explain the difference between iteration and recursion
		Explain how recursion works
		Explain what the base case and general case are
		Develop recursive algorithms to solve problems
------------------------------------------
Overview
	Problems can be solved in two distinct ways
		iteration
			using a loop to repeat a process to come to a solution
		recursion
			solving a problem by reducing it to smaller versions of itself
	Many problems can be solved with either method
		Most problems are more easily solved with iteration
		Some problems are more easily solved with recursion
---------------------------------------------
Recursive algorithms
	Recursive algorithms have two cases
		General Case - solution is smaller version of original problem
		Base Case - solution is obtained directly
	Recursive algorithm rules
		Every recursive algorithm must have one (or more) base cases
		The general case must eventually be reduced to the base case
		The base case stops the recursion
----------------------------------------------
Factorials
	n Factorial is the product of all the whole numbers from 1 to n
	For example:
		[[code]]
		1! = 1
		2! = 1 * 2
		3! = 1 * 2 * 3
		4! = 1 * 2 * 3 * 4
	Written another way
		[[code]]
		1! = 1
		2! = 2 * 1
		3! = 3 * 2 * 1
		4! = 4 * 3 * 2 * 1
		...
		n! = n * (n-1)!
	Also, [[for various reasons!http://mathforum.org/dr.math/faq/faq.0factorial.html]], 0! = 1.
----------------------------------------------------------
Recursive Solution	
	Given n! = n * (n-1)!
		Factorials can easily be solved recursively
		Note: (n-1)! is a smaller version of n!
	For the example above
		n=0 (0!) is the base case (0! = 1)
		All other values of n are the general case
	The recursive factorial function would look like this:
		[[code]]
		int factorial(int num)
		{
			if (num == 0)  // Base case
				return 1; 
			else	           // General case
				return num * factorial(num-1); 
		}
----------------------------------------------
Practice
	Write a recursive function that computes the sum of all numbers from 1 to n, where n is given as parameter.
		[[code]]
		//return the sum 1 + 2 + 3 ... + n
		int sum(int n)
	Write a recursive function that computes and returns the sum of all elements in an array, where the array and its size are given as parameters.
		[[code]]
		//return the sum of all elements in a[]
		int sumArray(int a[], int n)
	Write a recursive function that finds and returns the smallest element in an array, where the array and its size are given as parameters.
		[[code]]
		//return the smallest element in a[]
		int findMin(int a[], int n)
	Write a recursive function that determines whether an array is a palindrome, where the array and its size are given as parameters.
		[[code]]
		//returns true if str is a palindrome, false otherwise
		bool isPalindrome(string str);
	Note: All these are more easily solved iteratively so the recursive solution may not seem intuitive 
-------------------------------------------------
Linked lists
	Linked lists can be processed recursively, and in some instances, the recursive solution is easier than the interative solution
	Printing list forward using recursion (no real advantage over using iteration)
		[[code]]
		void printNodesForwards(Node* node) {
			if (node==NULL)
				return;
			cout << node->data << ' ';
			printNodesForwards(node->next);
		}
	Printing list backward using recursion (much simpler than using iteration)
		[[code]]
		void printNodesBackwards(Node* node) {
			if (node==NULL)
				return;
			printNodesBackwards(node->next);
			cout << node->data << ' ';
		}
-------------------------------------------------------

		

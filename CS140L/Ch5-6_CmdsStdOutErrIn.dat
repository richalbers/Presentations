Ch5,6: Commands and stdout/err/in
	At the end of this presentation you should be able to
		Explain what the different types of commands are
		Explain how the system finds a cmd when you type it's name
		Use man to find information about a command
		Explain what stdout, stderr, and stdin are
		Use file redirection, pipes, and filters apropriately
		Explain and use cat, wc, grep, sort, head, tail
----------------------------------------------------------------------
Commands
	Commands can be
		built into the shell (e.g. cd)
		A compiled program
			These are in machine code.  In windows, they'd end in .exe.  On Linux, they don't.
		A shell script
			A shell script is a text file containing a sequence of command-line commands that are run sequentially
		An alias - another name for some existing command
	Executable programs are typically located in a directory named bin
		There are a number of bin directories in the file system
----------------------------------------------------------------------
Cmd Location
	When you type a command (using a relative path), the system looks in the following locations
		The shell itself (a built-in command)
			There are very few of these
		Directories listed in your PATH.
			This is an environment variable that contains a : delimited list of directories
			To see your PATH type:	
			[[code]]
				echo $PATH
	Note: Windows works the same way, but by default always looks in the current directory as well; On Linux if you want to look in the currect directory, you need to add that to your path
		[[code]]
			PATH=$PATH:.
------------------------------------------------------------------
Cmd Info
	which shows you the location of the command you're running
	[[code]]
		which ls
	type shows you if it's a binary, script, etc.
	[[code]]
		type ls
	man (and help) tells you what the command does and what options and arguments it can accept
	[[code]]	
		man ls
------------------------------------------------------------------
Practice
	Print our your PATH
	Determine what directory each of the following commands are in, and what type of file they are?
		cp
		passwd
		cd
	Erase your path by executing the following:
		PATH=""
	Then try running the following command: pwd, ls, cd.  Do any of them work?
	Fix your path by setting the PATH variable back to what it was originally (or logging off and back on).
------------------------------------------------------------------
man pages
	There are man(ual) pages for lots of things. 
	Sections:
		1. User commands
		2. Programming interfaces for system calls
		3. Programming interfaces to the C library
		4. Special Files
		5. System file formats
		6. Games and related stuff
		7. Miscallaneous
		8. System admin commands
	You don't need to memorize these because this info in in the man page for the man command!
	[[code]]
		man man
	You can provide the man command a section number to get the page from that section.
	[[code]]
		man passwd
		man 5 passwd
	Note: The system calls are specific to *nix. (Unix or Linux) 
---------------------------------------------------------------------
man misc
	At the end of each man page there is a SEE ALSO section showing a list of similar or related commands
		If there's another man page of the same name in another section it will be listed
		G takes you to the bottom of the man page (less is used to read man pages)
	Other man-page-related commands
		whatis - provides you a one-line description of what a command does 	
		[[code]]
			whatis ls
		apropos - provides you a list of commands related to a search term
		[[code]]
			apropos passwd
--------------------------------------------------------------------
Practice
	Read the man page for the sleep() function (not the sleep command!).
		What header file needs to be included?
		How would you call it to sleep for 5 seconds?
		Is it possible it would return before the 5 seconds was up?
	Find all the man pages that have something to do with pid (stands for process id)
		Which are function calls?  Comamnds?  File formats?
		What function would be used inside a c/c++ program to get the process's processes id?
--------------------------------------------------------------------
alias
	Aliases are simply new names for existing commands
	They are created with the alias command, as follows:
	[[code]]
		alias ll='ls -l'
		alias ll. = 'ls -ld .*'
	They only exist in the shell they're created in, so they are typically created in your .bashrc file 
		That way they get created when you log in and are available until you log out

---------------------------------------------------------------------
stdout and stderr
	Output generated from a command gets sent to two special "files"
		stdout - the "file" good outut is sent to
		stderr - the "file" bad output is sent to
	By default, both of these "files" are directed to the command line but they can be redirected
	[[code]]
		ls -l /usr/bin > ls.out    #redirects stdout to file ls.out
		ls -l /usr/bin >> ls.out   #redirects stdout; appending to file
		ls -l /usr/bin 2> ls.err   #redirects stderr to file ls.err
		ls -l > ls.out 2> ls.err   #redirects both to different files
		ls -l > ls.out 2>&1	   #redirects both to ls.out
		ls -l 2> /dev/null	   #thows away error messages
----------------------------------------------------------------------
stdin and pipes
	Commands by default read from stdin
	Try these
	[[code]]
		cat   #type stuff, press <cntrl d> to end
		cat < /etc/passwd	#redirects stdin
	And you can pipe stdout from one command into stdin of the next
	[[code]]
		ls -l | wc	 	# wc is word count
		cat /etc/passwd | wc   
		cat /etc/passwd | sort 
	And you can send the output to both a file and another command using tee
	[[code]]
		ls -l | tee ls.out | wc
---------------------------------------------------------------------
Filters
	The following are useful utilities
		wc - counts lines, words, characters
		sort - sorts input
		grep - finds lines that match a text pattern
		head - prints first X number of lines
		tail - prints last X number of lines
	For examples:
	[[code]]	
		ls -l /bin | grep x | sort | tail
----------------------------------------------------------------------
Practice
	List all the entries in /etc/passwd that contain a y
	List all the entires in /etc/passwd that contain a y in sorted order
	List all the files in /usr/bin in sorted order
	List all the processes running on the system (ps -ef) and filter out all but roots
	Repeat the previous but use wc to count how many root has running.
----------------------------------------------------------------------
Use in programs
	In C++, there are streams defined in #iostream for stdout, stderr, and stdin. They are:
		cout -standard out (stdout)
		cerr - standard error (stderr)
		cin  - standard in (stdin)
----------------------------------------------------------------------
Practice
	Write a C++ program named teststd that
		Sends the text "this is good output" to cout
		Sends the text "Error!" to cerr
	When complete, run it as shown below, and note what is displayed on the screen and what is in the output file(s) after each run
	[[code]]
		teststd
		teststd > d.out
		teststd >> d.out
		teststd 2> d.err
		teststd > d.out 2> d.err
		teststd > d.out 2>&1

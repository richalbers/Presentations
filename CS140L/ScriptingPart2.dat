Scripting Part 2
	At the end of this presentation you should be able to	
		Use while loop with numeric counter
		Use while loop with read to process data from file or command
		Use for loop to process a list
		Process command line arguments sent to the script
-----------------------------------------------
reading data
	The read command reads a line of data
	It be used to
		read data from stdin
		read data from another file (using redirection)
	For example
	[[code]]
		echo -n "Enter you name: "
		read name
		echo "Hello $name"
-------------------------------------------------
Loops
	The supported loop structures are	
		while
		until
		for
	While continues in the loop while a condition is true
	Until continues in the loop until a condition is true
	For processes elements in a list one by one
-------------------------------------------------
while
	Example while loop
	[[code]]
		echo "I can count to 5!"
		count=1
		while [ $count -le 5 ]; do
			echo $count
			count=$((count+1))
		done
		echo "This concludes our counting to 5".

--------------------------------------------------------------------
while read
	Example of using while to process a file
	[[code]]
		cat /etc/passwd | while read line
		do
			echo $line
		done
------------------------------------------------------
Practice
	Try out the previous example
	Use cut to extract just the username and shell and save that data into two separate variables in the loop
	
-------------------------------------------------------
until
	Example until loop
	[[code]]
		echo "I can count to 5!"
		count=1
		until [ $count -gt 5 ]; do
			echo $count
			count=$((count+1))
		done
		echo "This concludes our counting to 5".
-------------------------------------------------------
for
	Simple for example
	[[code]]
		for filename in $(ls)
		do
			echo $filename
			chmod 600 $filename
		done
	Output of ls in processed one line at a time
----------------------------------------------------
Practice
	Enter and run the previous for loop example
	Add the -l option to the ls command and see what you get

----------------------------------------------
Special Variables
	There are several pre-defined shell variables you can make use of
		$# - The number of command line arguments provided
		$1, $2, $3, etc..  - The command line arguments
			The shift command moves them all to the left (first is thrown out and replace by second)
		$$ - The process ID of the current process
			Useful for making uniq tmp workfile names
			[[code]]
				$workFile=/tmp/scriptName$$
----------------------------------------------------
Practice
	Use a loop (and shift) to process all the command line variables, printing out each one





		
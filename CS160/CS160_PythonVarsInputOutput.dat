Programming, part 2
	At the end of this presentation you should be able to
		Explain what variables are
		Create variables
		Output data using the output function
		Get user data using the input function
		Explain what concatenation means and use it correctly
		Explain what casting is and use is properly
		Write programs that process both string and numeric data
-----------------------------------------------------
Variables 
	Variables are used to store data
	Variables typically have a type and name
	General Types
		Integer
		Floating point
		String
		Boolean (true or false)
	Name
		Meaningful name that describes the variable contents
		Programmer makes this up, but it must follow certain rules
		In Python variable names must start with a letter, and can contain letters, numbers, and _
-----------------------------------------------------
Creating Variables
	Variables are created and assigned values using an assignment statement (=)
	In python the data type of the variable is determined by the data that is put into it

	Examples
	[[code]]
		name="bob"	#string
		count=4		#int
		pi=3.14		#float

---------------------------------------------------
Output
	You can print the contents of a variable using print

	Example	
	[[code]]
		name="bob"	#string
		count=4		# int
		pi=3.14		# float
			
		print(name)
		print(count)
		print(pi)
		
	Exercise: Enter the previous lines into a source file (using IDLE) and run it.
----------------------------------------------------
Concatenation
	You can join two strings together using the + operator
		Joining two strings is called concatenating them (or concatenation)	
	Example
	[[code]]
		firstName="Rich"
		lastName="Albers"
		print(firstName + lastName)
			
		fullName=firstName + lastName
		print(fullName)
			
	Exercise: Enter the previous lines into a source file and run it.
	Exercise2: Fix the program by putting a space between the first and last names
---------------------------------------------------
Simple math
	You can so math on numeric data/variables
		+, -, *, /

	Example
	[[code]]
		sideLength=4
		squarePerimeter = sideLength * 4	
		squareArea = sideLength * sideLength
			
		print(squarePerimeter)
		print(squareArea)
			
---------------------------------------------------
Exercise
	Write a program that 
		Defines the length and width of a rectangle (i.e. store values for lenght and width in variables)
		Computes the perimeter of the rectange
		Prints the perimeter
---------------------------------------------------
casting to string
	When you output data, it's always best to be clear about what is being printed.
		Instead of printing "24" and assuming the user knew what that was
		It would be better to print "The perimeter is 24"
	But this doesn't work
	[[code]]
		perimeter=24
		print("The perimeter is " + perimeter)
	because you can't oncatenate (join) a string and an int.  You can only concatenate strings.
	But we can convert perimeter to a string by "casting" it.
	[[code]]
		print("The perimeter is " + str(perimeter)

---------------------------------------------------
Exercise
	Update your previous program (that calculates and prints the perimeter of a rectangle) so the output looks like this:
	[[code]]
		Rectangle Properties:
			Length: XX
			Width: YY
			Perimeter: ZZ
	Note: XX, YY, and ZZ will be replaced by your variables values.
			
---------------------------------------------------		
Input
	The input function 
		prompts the user to enter something
		returns whatever data is entered 
			Data is always returned as a string
	Example
	[[code]]
		firstName=input('Enter your first name: ')
		lastName=input('Enter your last name: ')
		print('Hello ' + firstName + ' ' + lastName)
		
	Example2
	[[code]]
		num1=input('Enter a number: ');
		num2=input('Enter another whole number: ')
		print(num1 + num2);  #concatenates strings, doesn't add numbers
----------------------------------------------------
Casting to numbers
	As we saw prevously, we can cast numeric data to strings
	But we can also cast string data to numbers (providing the string contains numeric data)
	The casting functions are
	[[code]]
		int(string_or_float) # returns int version of given data
		float(string_or_int) # returns floating point version of given data

	Example
	[[code]]
		x="3"
		y="4"
		print(x + y)
		print( int(x) + int(y) )
-----------------------------------------------------
Casting input
	Whenever you get data from the user using input, it is returned as a string
	If you want to treat it as numeric, you need to cast it
	Example:
	[[code]]
		num1str=input('Enter a number: ')
		num1=int(num1str)
			
		num2str=input('Enter another whole number: ')
		num2=int(num2str)
			
		print(num1 + num2)
	More concise example
	[[code]]
		num1=int( input('Enter a number: ') )
		num2=int( input('Enter a number: ') )
		print(num1+num2)
--------------------------------------------------------
Exercise	
	Update your previous program so the rectangle's length and width are obtained from the user.
	It should then look like this when run:
	[[code]]
		Enter the rectangles length: 4	
		Enter the rectangles width:	3
			
		Rectangle Properties:
			Length: 4
			Width: 3
			Perimeter: 14	
	Note: The user may enter data other than 4 and 3
-------------------------------------------------------------

